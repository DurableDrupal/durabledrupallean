# Chapter 1 - Overcoming Choice Panic - What frameworks should we use?

In this chapter we'll be facing up to what some call Choice Panic: we'll lay all our doubts about CMS frameworks out on the table (should we be using Drupal for this project?), sift through the options, and go for our best option as initial hypothesis, given what we need to do now and what we really have to go on. We'll explore that particular choice and the characterics that make it the most versatile and dynamic open to us right now, making sure we feel comfortable with that, and making sure we're all on the same page.

Because we really need to free ourselves from choice panic. That can paralyze us, or disrupt our work at any time if the project stakeholders aren't all on board with the major framework options devs will actually be considering as the project evolves. 

We need to have this discussion sooner rather than later. We also need to realize that as time goes on we'll always be migrating. This will allow us to prepare gradually and ease the pain. Hey, that's our job!

## This is what we need and we need it now

We need to adopt a process which bases itself brutally on what we need and what our clients need, and which abandons vested vendor lock-in of any kind. We can't be married to any one set of frameworks any more.

Let's suppose we are a new web development team and we have our first job together. In the best agile tradition it's a "light" one, so that we can get to know each other and build some synergy to prepare us for a bigger project we'll be starting in a month or so (an online magazine). 

A neighborhood non-profit runs programs for youth in the community. They've had a webmaster who managed the content on their site for them, but he seems to have disappeared and they've lost access to their old stuff. Actually they've been wanting to re-do their site for some time, so they have some ideas, but they're stuck. They want to be able to manage their content without depending on anyone else for that.

So what to do?

## Building from scratch or not? Frameworks or not?
## Proprietary or not? Open-source or not?
## [WordPress](https://wordpress.org/) or not?
## [Drupal](https://drupal.org/) or not?
## Drupal 8 or not?
## Backdrop or not?
## Vanilla Drupal 7 or not? Distro or not?

Won't everything we build in Drupal 7 be obsolete in a few months? Well no, actually Drupual 7 is an extremely mature project, with all kinds of tested and true themes and modules, including options for including much of the hotness of Drupal 8 right now and without the learning curve.

The thing is, we can't start downloading the latest version, adding in the modules and themes we always use again, configuring them again, testing everything again. We need a rich starting point. Fortunately we can get that in a distribution profile, a Drupal distro.

## Let's not just use Drupal 7, let's use a re-usable distro that we can evolve over time and even migrate... something that will last us several years

Use a distro that gives us a powerful and versatile starter kit, so we don't have to go combing through all the alternatives for modules, themes, plugins (unless we want to)

Everything in code with install profile and configuration management

Built in migration of content between legacy sites, development, test and staging, and live instances.

Easy to set up complete development environments for all team members no matter what their skill set.

A distro that can be part and parcel of a repeatable Agile and Lean process that can evolve together with changes in the industry as well as the needs our clients have and realize that they have over time.

It's not just about building, we have to be experts in maintenance, for the long haul. There are going to be security releases, upgrades of all kinds, new technology to integrate with, varying backends... 

And a distro is something we can evolve, maintain over time as we grow and better identify a productive baseline we can build on.

>The devil is in the maintenance

And we don't have to get married to any of the frameworks we're using. In fact, we want to be preparing to migrate gradually all along, so we'll be ready when the time comes

## Presenting DurableDrupalDistro: fork it, tailor it, maintain it, branch and release it over all your projects!


## Introducing DurableDrupalDistro with Lean process
..... in this chapter we .... 
In Chapter 2 - DurableDrupalDistro, we'll ...







