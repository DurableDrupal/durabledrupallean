# Chapter 1 - Overcoming Choice Panic - What frameworks should we use?

In this chapter we'll be putting Choice Panic behind us and making a firm decision on the CMS framework we'll be using for our content-centric projects. First we'll place all our doubts right on the table for all to see (should we be using Drupal for this project? really?), sift through the options, and choose the best one as our initial hypothesis. In making that decision we'll base ourselves on our current backlog of projects and on the information we actually have to go on right now. We'll explore that particular choice and the characteristics that make it the most versatile and dynamic option open to us. We want to be comfortable with the decision, and have the whole team all on the same page.

Now, also, above and beyond the framework, we are adopting a process which bases itself brutally on what we need and what our clients need, and which abandons vested vendor lock-in of any kind. We can't be married to any one set of frameworks any more. So the framework we select must be able to fit into our adopted, evolving and tailored process at a time when the industry is exploding with change and opportunities.

## This is what we need and we need it now

Let's suppose we are a new web development team and we have our first job together. In the best agile tradition it's a "light" one, so that we can get to know each other and build some synergy to prepare us for a bigger project we'll be starting in a month or so (an online community of writers, a more challenging project we will be dealing with in successive chapters). 

A neighborhood non-profit runs programs for youth in the community. They've had a webmaster who managed the content on their site for them, but he seems to have disappeared and they've lost access to their old stuff. Actually they've been wanting to re-do their site for some time, so they have some ideas, but now they're stuck. They want to be able to manage their content without depending on anyone else for that.

So what to do?

## Building from scratch or not? 

By starting from scratch what is usually meant is not actually starting with a blank page, but rather the use of light-weight frameworks and libraries over larger frameworks which offer a lot of built-in off-the-shelf functionality together with a large, easy to extend eco-system of plug-ins and add-ons.

Many developers are attracted towards smaller, light-weight libraries and components because they feel they will be dealing with less complexity, and will be able to be more creative and to "break new ground". They also feel they will not be stuck with a monolithic system and faced with the task of "turning off" a great deal of the built-in functionality not required for many projects, which is something not always easy to do. They also 



Truly building from scratch in a vacuum, without any reusable base, even a small one, is truly like re-inventing the wheel. At the very least you'd want to be developing everything you do as re-usable pre-tested components and of course using existing libraries appropriate for the web application you are building. And then abstracting out add-ons for re-use in other projects, gradually making the whole shebang more secure in the light of experience, making other kinds of fixes and tweaks based on feedback that comes in over time... which is, of course, if you added in the benefits of community, is exactly what a framework is supposed to be.

What are the advantages that are often cited in favor of building your own web applications "from scratch"?






* You are building on top of shiny new technology

## Frameworks or not?

## Proprietary or not? Open-source or not?

## [WordPress](https://wordpress.org/) or not?

## [Drupal](https://drupal.org/) or not?

## Drupal 8 or not?

## Backdrop or not?

## Drupal 7 or not?

Won't everything we build in Drupal 7 be obsolete in a few months? Well no, actually Drupual 7 is an extremely mature project, with all kinds of tested and true themes and modules, including options for including much of the hotness of Drupal 8 right now and without the learning curve.

The thing is, every time we start a new project, we can't always be downloading the latest version, working to disable the cruft, adding in the modules and themes we always use again, configuring them again, testing everything again. We need a rich starting point. Fortunately we can get that in a distribution profile, a Drupal distro.

## Drupal 7 Distro or not?


Use a distro that gives us a powerful and versatile starter kit, so we don't have to go combing through all the alternatives for modules, themes, plugins (unless we want to)

Everything in code with install profile and configuration management

Built in migration of content between legacy sites, development, test and staging, and live instances.

Easy to set up complete development environments for all team members no matter what their skill set.

A distro that can be part and parcel of a repeatable Agile and Lean process that can evolve together with changes in the industry as well as the needs our clients have and realize that they have over time.

It's not just about building, we have to be experts in maintenance, for the long haul. There are going to be security releases, upgrades of all kinds, new technology to integrate with, varying backends... 

And a distro is something we can evolve, maintain over time as we grow and better identify a productive baseline we can build on.

>The devil is in the maintenance

And we don't have to get married to any of the frameworks we're using. In fact, we want to be preparing to migrate gradually all along, so we'll be ready when the time comes

What we want is a re-usable distro that we can evolve over time and even migrate... something that will last us several years

## Presenting DurableDrupalDistro with Lean process

Fork it, tailor it, maintain it, branch and release it over all your projects!

..... in this chapter we did .... 
In Chapter 2 - DurableDrupalDistro, we'll ...







