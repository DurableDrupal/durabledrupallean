# Chapter 1 - Overcoming Choice Panic - What frameworks should we use?

In this chapter we'll be putting Choice Panic behind us and making a firm decision on the CMS framework we'll be using for our content-centric projects. First we'll place all our doubts right on the table for all to see (should we be using Drupal for this project? really?), sift through the options, and choose the best one as our initial hypothesis. In making that decision we'll base ourselves on our current backlog of projects and on the information we actually have to go on right now. We'll explore that particular choice and the characteristics that make it the most versatile and dynamic option open to us. We want to be comfortable with the decision, and have the whole team all on the same page.

Now, also, above and beyond the framework, we are adopting a process which bases itself brutally on what we need and what our clients need, and which abandons vested vendor lock-in of any kind. We can't be married to any one set of frameworks any more. So the framework we select must be able to fit into our adopted, evolving and tailored process at a time when the industry is exploding with change and opportunities.

## This is what we need and we need it now

Let's suppose we are a new web development team and we have our first job together. In the best agile tradition it's a "light" one, so that we can get to know each other and build some synergy to prepare us for a bigger project we'll be starting in a month or so (an online community of writers, a more challenging project we will be dealing with in successive chapters). 

A neighborhood non-profit runs programs for youth in the community. They've had a webmaster who managed the content on their site for them, but he seems to have disappeared and they've lost access to their old stuff. Actually they've been wanting to re-do their site for some time, so they have some ideas, but now they're stuck. They want to be able to manage their content without depending on anyone else for that.

So what to do?

## "Building from Scratch" or not? Frameworks or not?

By starting from scratch what is usually meant is not actually starting with a blank page, but rather the use of light-weight frameworks and libraries over larger CMS frameworks. Light-weight frameworks might give you more freedom and flexibility and may be easier to start using, whereas larger frameworks offer a lot of built-in off-the-shelf functionality together with a large, easy to extend eco-system of plug-ins and add-ons. And using them often constitutes being part of a relatively large community of builders and users, offering possibilities for helping and being helped as well as for networking of many kinds.

### Starting from Scratch: Pros

Many developers are attracted towards smaller, light-weight libraries and components because they feel they will be dealing with less complexity, and will be able to be more creative and to "break new ground". They also feel they will not be stuck with a monolithic system and faced with the task of "turning off" a great deal of the built-in functionality not required for many projects, which is something not always easy to do. 

* You are building on top of shiny new technology
* Experimentation with new technologies and frameworks is not only fun but necessary in order to know what the options are.
* When a project is all about things that have never been done before, a completely straight-up ground-breaking disruptive [Blue Ocean](http://en.wikipedia.org/wiki/Blue_Ocean_Strategy) effort, it only makes sense to find a best-fit candidate architecture which doesn't complicate things with its extra baggage and lowest common denominator features which won't bring anything to the table or may even be a nuisance.

### Starting from Scratch: Cons

* If your are developing a content-centric project with many use cases that coincide with the larger CMS frameworks, then it really does not make any sense to reinvent the wheel. Countless features will have to be re-created: authentication and authorization (think: access rights for users and groups), forms management, database management, separation of concerns between business logic, data and the presentation layer, etc. It's a long list. 
* The larger CMS frameworks are constantly monitored for security threats and constantly offer security updates when threats emerge. So much so that to some (superficial) eyes the sheer number of security fixes seems to constitute evidence of their being more likely to come under attack. But experience shows this nothing could be further from the truth. One-off apps will need to dedicate considerable time and resources towards security issues on many levels.
* Starting from scratch may need a larger team, with more specialists compared to using a CMS framework.
* It is futile, for many use cases, to attempt to replace the work of whole communities across several years with a small team.
* You will have a harder time finding replacement team than you would if the project were being implemented with a large, well-known and highly adopted CMS framework like WordPress or Drupal, or Sitepoint.

D> Note: In this author's opinion, the learning curve necessary to acquire the skills required for the development of a modern website or web application tends to actually be the same, no matter whether you "start from scratch" or decide to use a large CMS framework. Even though learning a large CMS framework like Drupal, for example, may take several months in order to be productive, the same is equally true when it comes to getting up to speed with other frameworks. In the case of Drupal you may spend a lot of time learning "how things are done". But if you go the other route, you will be learning "how things are done" in a whole series of smaller frameworks; while needing to find out "how to do things" quite a bit more than you would have to in the former case. So, starting from scratch may take even longer. I would say it's six of one and half a dozen of the other. Furthermore, much of what "learning Drupal" is often said to entail actually includes things proper to the web application domain itself, such as server provisioning, e-commerce, email management, maintenance, testing frameworks, and methods of deployment, etc. So this isn't a pro or a con, again, in this author's opinion and experience.

D> "Frameworks don't scale!" Well, this is simply just not true. The Emmys, Weather.com, and many other examples abound. Of course, it's going to call for a lot of work to get a framework to scale. It's not the kind of work you expect to be doing when you signed up for a CMS framework either: Load balancers, Content Delivery Networks, HTTP and Database optimizations, accelerators, are just the start. Bud did you seriously think you were going to avoid all that just by using a lighter framework? Actually, it's all the same work. So this isn't a pro or con either.

In summary, reusability is an important principle and goal in software development, and for good reason. It is often summed up in the phrase "standing on the shoulders of giants". By observing this principle, one brings a necessary quota of zen modesty to the table and professionalizes ones activity. By admitting that existing CMS solutions have been perfected over time by their surrounding community of creators and users, and have honed issues such as security, functionality, ease of use, and many other fronts, developers gain power and productivity. There are CMS solutions for many different architectures and programming languages, and the best ones are fully customizable.

The reckless "hero" go-it-alone approach to software development, on the other hand, is often disguised improvisation, and a recipe for failure.

## Proprietary or not? Open-source or not?

Once the choice of framework has been made for a given project or series of projects, it must then be decided to go either with a proprietary or an open source solution.

On this subject, let's first take a look at the title of a fairly recent article: ["Open Source vs. Proprietary Software: There is No Clear Winner"[(http://www.cmswire.com/cms/information-management/open-source-vs-proprietary-software-there-is-no-clear-winner-021752.php#null). This might inflame the hearts and minds of many of us who have unquestionably supported open source over the years. But it's time to coldly ask ourselves: which has better code, and what's the low-down about true cost to market?

The article itself begins by asking why anyone would want to ever use anything but Open Source Software: "It’s free (or almost free); it’s built by passionate communities of developers; you can “look under the hood”; and there’s no vendor lock-in. Add to that, that the rate of innovation is supposed to be faster." And the short answer is that after a certain point of complexity is reached, it ceases to be true: it's no longer free even if there is no actual price tag on it, since the cost of (professional) use is much higher; it's increasingly built by company employees rather than a broad based passionate community; the rate of innovation ceases to be fast; and a kind of vendor lock-in arises out of the sheer scale becoming necessary for development, deployment and maintenance.

* According to Software development testing leader [Coverity](http://www.coverity.com), defect densities are practically identical. Where the [number of lines of code](http://www.ohloh.net) exceed 1 million, proprietary quality is better. The reason seems to be that not all open source projects have the budget to deal with the infrastructure required by the added complexity. Interestingly enough [Drupal has 970,000](http://www.ohloh.net/p?ref=homepage&q=drupal), just under the limit.
* "The true value in open source is the open, collaborative community of like-minded professionals who come together to crowd-source ideas and build great things" (Kevin Cochrane, Alfresco). But proprietary software vendors have huge community support to, as is undeniably the case with [Sharepoint Saturday's](http://www.spsevents.org). They have the "speakers", the "sponsors" and the T-shirts!
* In fact, there is a growing tendency within all open source frameworks for the number of very key core contributors to form part of an inner circle. In this way, the gap is closing between the relatively small number of "employee" committers on a proprietary project, on the one hand, and the ever-decreasing number of core committers on open source projects that grow in complexity. 
* Cost to market actually converges in both cases also, even though of course results may vary: Proprietary solutions charge an up-front and/or licensing price, but Open Source frameworks require considerable development, training and administratation costs to accomplish what the former does out-of-the-box.

D> In this author's opinion technical support and infrastructre service levels may be obtained for both kinds of frameworks; and there are more and more consultants, agencies and companies with an enormously high level of domain knowledge for either kind of framework also. These areas cannot really be considered to be an advantage for only proprietary frameworks.

Rather than the choice being between Proprietary and Open Source, it is more about the project's real needs. "Paying developers to massively customise an open source CMS may end up costing you more than paying for a proprietary solution that more closely meets your requirements. On the flip side, paying license fees for an ill-suited proprietary solution doesn't make any sense either."  (See [Choosing Between an Open Source or Proprietary Website CMS](http://www.netxtra.net/insights/choosing-between-an-open-source-or-proprietary-website-cms/)).

## [WordPress](https://wordpress.org/) or not?

The stark fact here is that, from a CMS framework perspective, WordPress is less than Drupal, unless what you really want is an elegant industry-standard blog. While Drupal is a superset of WordPress, and one may migrate to Drupal comfortably without expecting to miss any features, the opposite is certainly not the case. 

Unless your use cases coincide with the functionality offered by WordPress, in which case you still have a choice to make, the following points point consistently in Drupal's favor:

* It's when you contemplate porting a Drupal web application to a WordPress website that the latter's shortcomings really stand out.
* Despite [Easy Post Types](https://wordpress.org/plugins/easy-post-types/) Drupal wins hands down in terms of being able to create business objects with content types, having support for all kinds of field types, plus field collections and other features.
* Users are just another entity in Drupal and can use the same patterns that any old business object (taxonomy term, content type item, user, etc.) uses.
* Separation of concerns between the dynamic data model, the semantic HTML containing the dynamic content of the business object data model, and the styling to be applied to this basic unadorned un-styled HTML (that's called semantic HTML) is very well observed in Drupal, but badly supported in Wordpress, which means parrallel team development work is greatly impaired.
* WordPress has nothing like Drupal's Views: a complete and intuitive SQL Query Generator that's so intuitive most users don't realize it's an SQL Query Generator. It's really easy to list your stuff in all kinds of different ways.
* Rules module: built in support for UI based business rules, plus the ability to roll your own in code.
* Huge amount of very rich extensions (Drupal modules):
  * Complete layout and theming development system alternatives
    * [Page Manager and Panels](https://www.drupal.org/project/panels) (either with [Panopoly](https://www.drupal.org/project/panopoly) or do it yourself (as we do in our [DurableDrupalDistro](https://github.com/victorkane/drupal-lean))
    * [Display Suite](https://www.drupal.org/project/ds)
    * [Context module](https://www.drupal.org/project/context)
  * Workflow modules
    * [Workbench](https://www.drupal.org/project/workbench)
    * [Workflow](https://www.drupal.org/project/workflow)
* Everything in code alternatives allow us to break the back of configuration in the database, and help our teamwork. 

## [Drupal](https://drupal.org/) or not?

Drupal sits under the 1 million lines of code limit, which would indicate that it is a project whose quality has greatly benefited over the years from having been developed by a diverse and large international community. Since the code is open source, it has been  available to all to freely criticize, propose modifications, and discuss. It is in fact one of the most sophisticated CMS frameworks around, whether open source or proprietary, capable of supporting the development of large-scale content-centric web application projects. 

Many of the benefits of Drupal stood out in the previous section when it was compared to WordPress. But there's more.

### Community:

Drupal has a truly international community, with a huge amount of communication, sharing of responsibility and participation of all kinds going on across borders at all times. This enriches the level of talent no end.

### Intelligence

And since the Drupal community is based solely in the United States, the approach tends to be "out of the box", with people looking for deep and permanent solutions and not simply quick fixes based on a "common sense" empirical ways of thinking. That's why even though Drupal could have been written off with the advent of Server side java script and a sexy bevy of front-end frameworks (and might be one day), or perhaps by new offerings from the Java/Scala front, the huge critical mass of intelligence has forged Drupal into something truly modern, promising years of competitive mojo and nothing to be ashamed of: REST interfaces, separation of concerns with adaptive back-ends, front-ends, and straightforward integration with multi-tiered and alternative components.

### Easily extensible

Since highly talented people have always been attracted to the community, solutions have constantly emerged keeping those leveraging Drupal for their content-centric projects on the technological vanguard with minimal effort. In a rich, mature eco-system, there is, literally, "a module for everything", and not just those with sexy features, but also those promising integration with all major players in the modern web app universe. Today, for example, with no coding you can whip up a fully functional social network based platform with a back-end API, with node.js based chat and activity stream, and with a totally mobile first responsive theme to top it off in literally hours.

### Drupal has hit the mainstream:

To be clear, in my opinion, this has had absolutely nothing to do with so-called success in the "enterprise" market, with its confusion, destructive short-sightedness, greediness and anarchy of production. No, Drupal has hit the mainstream of working stiffs, the critical mass of people who actually do web app building. So nowadays you can find support (how do I ..?) and other resources as fast as you can type into a search engine... which, yes, goes straight to the appropriate issue queues and discussions, on and off the [Drupal main site](https://drupal.org)!

### An abundance of Drupal-friendly deployment options

Depending on the scale of what you are deploying, there are a host (pardon) of infrastructure alternatives: From shared hosting (yes, it's gotten better), to VPS and cloud PaaS, including the inimitable [Pantheon](https://www.getpantheon.com/) platform, it's getting easier and easier for Drupal based web applications to enjoy smooth delivery and maintenance.

So much internationally active talent, so much engineering, so much quality! Drupal excels as a CMS Framework.


## Drupal 8 or not?

## Backdrop or not?

## Drupal 7 or not?

Won't everything we build in Drupal 7 be obsolete in a few months? Well no, actually Drupual 7 is an extremely mature project, with all kinds of tested and true themes and modules, including options for including much of the hotness of Drupal 8 right now and without the learning curve.

The thing is, every time we start a new project, we can't always be downloading the latest version, working to disable the cruft, adding in the modules and themes we always use again, configuring them again, testing everything again. We need a rich starting point. Fortunately we can get that in a distribution profile, a Drupal distro.

## Drupal 7 Distro or not?

Use a distro that gives us a powerful and versatile starter kit, so we don't have to go combing through all the alternatives for modules, themes, plugins (unless we want to)

Everything in code with install profile and configuration management

Built in migration of content between legacy sites, development, test and staging, and live instances.

Easy to set up complete development environments for all team members no matter what their skill set.

A distro that can be part and parcel of a repeatable Agile and Lean process that can evolve together with changes in the industry as well as the needs our clients have and realize that they have over time.

It's not just about building, we have to be experts in maintenance, for the long haul. There are going to be security releases, upgrades of all kinds, new technology to integrate with, varying backends... 

And a distro is something we can evolve, maintain over time as we grow and better identify a productive baseline we can build on.

>The devil is in the maintenance

And we don't have to get married to any of the frameworks we're using. In fact, we want to be preparing to migrate gradually all along, so we'll be ready when the time comes

What we want is a re-usable distro that we can evolve over time and even migrate... something that will last us several years

## Presenting DurableDrupalDistro with Lean process

Fork it, tailor it, maintain it, branch and release it over all your projects!

..... in this chapter we did .... 
In Chapter 2 - DurableDrupalDistro, we'll ...







