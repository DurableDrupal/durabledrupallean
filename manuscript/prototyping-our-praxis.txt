# Prototyping our Praxis

*Gayle, Raúl, Vera, Jason, and El Viejo have decided to leave Water Works, the huge web app production venture capital crazed firm founded by Drywell Boniface, where they feel things are done in a mechanical, ineffectual "enterprise" way that doesn't leave them free to find the best way of meeting people's needs, and growing themselves in the process. Today they are meeting up at a co-working to see how to get started. It's exciting...*

## This is what we need and we need it now

Jason gazed at the others as they took their places round the table. He had just had a fight with his wife who wasn't happy to see him quit his project manager position at Water Works and abandon Drywell Boniface "for an adventure with that bunch of losers". He knew better, he knew he was doing the right thing, but how to get started? Could it really work?

There was Gayle, "tha designa", Vision Girl. Raúl, "tha programma", a serious "coda" and guru of Linux, open source tools and programming languages, and a command-line ninja. There was  Vera "tha thema", crafter of functionality in the browser, javascripot rockstar and SASSy CSS queen. And El Viejo (Old Guy) had just arrived and was settling down at the table with his old Linux Dell and his accursed Argentine green tea. El Viejo was kinda weird and never actually did that much, at least not quickly, but was very helpful as troubleshooter. He was almost always helpful. This first-time around, though, he might be a luxury they couldn't afford.

Jason started the meeting: "Hey guys, we got our first client!" Everyone started cheering so he waited for them to calm down again before he went on. "It's a neighborhood non-profit that runs programs for youth in the community. They had a webmaster who seems to have disappeared and they can't edit their old stuff. Plus they've been wanting to re-do their site for some time. I think it's a great opportunity for us to get started. I'd like to hear suggestions on how we can best do this."
Raúl wanted us to write our own framework from scratch, Vera wanted us to use WordPress because she could edit the theme right there in the browser, Gayle said the first thing we should do was a series of mock-ups and wait for approval on those before we did any development we would have to throw away anyway (a pet peeve of hers back at Water Works). It was El Viejo that suggested Drupal.
"OMG" said Raúl, "I thought that was why we left Water Works and Drywell, to use new things, to be free from all that!".
"Also," Vera chimed in, "if we use Drupal it's going to take forever, it's so hard to learn! And anyway, who knows what's gong on with Drupal anyway, which version to use, when the new version is ever going to be ready, etc., and then you have to start learning everything all over again. I tell you, Drupal is a mess!"
Jason could see El Viejo wanted to talk, but stopped him short before they wasted the whole morning on the argument. "Raúl, could we get this done with WordPress quickly? Or with some of those new frameworks you've been working with recently? We really need to bang this out and get our own web app up too"

## What El Viejo saw

For this we left old Drywell Boniface to his own devices? Looks like we're replicating the same old tired way of thinking... I should just go home to my 60 inch monitor (open source hardware of course) and start hacking on my own... but hey, developing web apps is hard! I can't do it on my own. And that's no fun anyways. I need to work with a team... but how to get them to see the light...

"OK, let me speak, I'm here aren't I after all?"
Jason grudgingly gave in and allowed El Viejo to speak. "But 5 minutes, ok Vie-ho?" He pronounced it "vie-ho" using an "h", instead of the Spanish "j" sound. This irritated El Viejo but he didn't let that bother him.

"OK, five minutes. We have to use Drupal because what we are actually doing is prototyping our own way of working, not just this site for the client. We're a start-up and human, so we're tool makers. What's most important is for us to find a way for all of us to work in parallel, quickly, but pulling together, with all the power of a reusable framework and with each of us doing what we do best. We can't be re-inventing the wheel, I know we're all in agreement on that.

Now, WordPress. (...better move on fast to the next point...) I recently read a great article [A Journey of Drupal and WordPress](http://www.mediacurrent.com/blog/drupal-and-wordpress)..."

El Viejo explained the major shortcomings of WordPress when it came to doing anything more than a blog site:

* It's when you contemplate porting a Drupal web application to a WordPress website that the latter's shortcomings really stand out.
* Despite [Easy Post Types](https://wordpress.org/plugins/easy-post-types/) Drupal wins hands down in terms of being able to create business objects with content types, having support for all kinds of field types, plus field collections and other features.
* Users are just another entity in Drupal and can use the same patterns that any old business object (taxonomy term, content type item, user, etc.) uses.
* Separation of concerns between the dynamic data model, the semantic HTML containing the dynamic content of the business object data model, and the styling to be applied to this basic unadorned un-styled HTML (that's called semantic HTML) is very well observed in Drupal, but badly supported in Wordpress, which means parrallel team development work is greatly impaired.
* WordPress has nothing like Drupal's Views: a complete and intuitive SQL Query Generator that's so intuitive most users don't realize it's an SQL Query Generator. It's really easy to list your stuff in all kinds of different ways.
* Rules module: built in support for UI based business rules, plus the ability to roll your own in code.
* Huge amount of very rich extensions (Drupal modules):
  * Complete layout and theming development system alternatives
    * [Page Manager and Panels](https://www.drupal.org/project/panels) (either with [Panopoly](https://www.drupal.org/project/panopoly) or do it yourself (as we do in our [DurableDrupalDistro](https://github.com/victorkane/drupal-lean))
    * [Display Suite](https://www.drupal.org/project/ds)
    * [Context module](https://www.drupal.org/project/context)
  * Workflow modules
    * [Workbench](https://www.drupal.org/project/workbench)
    * [Workflow](https://www.drupal.org/project/workflow)
* Everything in code alternatives allow us to break the back of configuration in the database, and help our teamwork. We'll go into much more detail on this later.
* More...

By the time El Viejo got through even Jason's jaw had dropped. He hadn't realized El Viejo had gone on for about 45 minutes as usual, but at this point everyone was on the same page. Drupal hadn't been the problem at WaterWorks. It was Drywell's fanboy "Drupal is awesome" mania which had seriously screwed up how Drupal was being used by concentrating mainly on bells and whistles: as a monolithic prison instead of as our own evolving and useful framework. El Viejo was wrapping up:

"... so this will enable us to actually prototype our own praxis, fueled by theory emerging from the direction we are taking our work. Drupal is powerful enough for us to make our own stable distro which we can evolve at will, but which we all spin up to get projects going."

## Raúl wants to start from scratch

Raúl could contain himself no longer. "OK, Drupal beats WordPress hands down. But why use one of these monolithic dinosaurs at all? Why not roll our own, keep it simple and make our lives easier?"

Now it was Jason who found an ally in El Viejo. He nodded in his direction and raised his eyebrows.

El Viejo explained, "No, we don't want a monolithic dinosaur... but we don't want to fool ourselves into thinking we can replace the work of whole communities ourselves. In the short run we'll spend more time developing and we'll end up with less quality because we'll be re-inventing not just the wheel but an immense wheel. And it will only get worse from there on.

Look at it from the point of view of security. Drupal has a whole security team, whenever a vulnerability is discovered, there's a fix out almost immediately. We don't have time to do that kind of testing on our own green code.

But I agree, we don't want to start out with Drupal core every time we start a new project, saying, hey context or panels, display suite or adaptive theme, workbench or workflow, and we certainly don't want to spend a whole bunch of time tearing out the cruft we don't need from what ships with Drupal core every time we start up a project repo.

I got a plan: we create our own distro, maintain it as we gain experience with each project, keep it lean and powerful, and re-use to our heart's content.

We start out deciding what to do with core, getting rid of the overlay, dashboard and toolbar nonesense, and old stuff like core profile and what have you. Then we mix and match, picking our own path through the Drupal module jungle, and come up with our own architecture, our own set of modules. Plus we incorporate an off-the-shelf responsive sub-theme, generate an install profile from this, and hey distro! we're all set!

That way, we're not only doing a project, we're toolmaking our own process together. We're in charge with a solid workhorse and that's much better than starting from scratch."

## What El Viejo promised

"Look," said El Viejo, "let's trace a path from here to there."

* Let's separate the prototype of our praxis from any platform at all, let's not marry any of them.
* Let's start out with the best of all possible worlds: something as simple to use as WordPress, but much more powerful: a durable Drupal distro with all the basic functionality we will always need to build practically anything. I will develop it and explain it to all of you step by step, and we can work with it, and it will grow with every project we do together. And if we later want to work with other tools and frameworks we can gradually add them in and evolve something together, rather than starting from scratch every time we want to build something.
* Drupal 7 is amazingly mature, full of reliable components on all levels that have also reached important points of maturity. They've been used in thousands and thousands of projects. We can base our own distro solidly on this and just re-use it time and time again. We need to build solutions that can last two or three years into the future.

"I actually have something that's almost ready. Just needs a few tweaks and I can share it with you all... Yes, Jason, I can present that tomorrow. The DurableDrupalDistro"

## What about Drupal 8?

Ah, yes, [Drupl 8](https://www.drupal.org/drupal-8.0).

Everyone felt they had something to say:

* [Drupal 8 FAQ](https://www.drupal.org/drupal-8.0/faq)
* [Why the big architectural changes in Drupal 8](http://buytaert.net/why-the-big-architectural-changes-in-drupal-8)
* [Dries buytaert's State of Drupal presentation](June 2014)(http://buytaert.net/state-of-drupal-presentation-june-2014)
* [Most of us couldn't even understand this Drupal 8 update page](https://groups.drupal.org/core/updates)
* For many, it's already been "Farewell" (in no particular order)
  * [After almost twelve years of Drupal, I am saying goodbye](http://berk.es/2012/10/01/farewell-drupal/)
  * [Why did Development Seed abandon Drupal?](http://www.quora.com/Why-did-Development-Seed-abandon-Drupal)
  * [Leaving Drupal is Hard to Do](http://cmsreport.com/articles/leaving-drupal-is-hard-to-do-4353)
  * [Remove quicksketch from MAINTAINERS.txt](https://www.drupal.org/node/2066783)
  * [Why I ditched Drupal and came home to WordPress](http://gerardmcgarry.com/2013/goodbye-drupal-hello-wordpress/)
  * [The Decline of Drupal, or How to Fix Drupal 8](http://mikeschinkel.com/blog/the-decline-of-drupal-or-how-to-fix-drupal-8/)
  * Sam Boyer's last but certainly not least [Keeping it Simple](https://medium.com/@sdboyer/keeping-it-simple-944526c5b7fb) and he's not saying farewell either :)

Jason took the lead here: "Look, everybody knows we need something solid that will stand us in good stead for the next 2-3 years. Drupal 8 is a fascinating topic and lots of people in the community are working hard on an awe-- really great platform that will revolutionize CMS. But the fact is, that will be when, this is now: we're delivering here and Drupal 8 isn't and won't be a viable alternative for at least a year and maybe even more until modules or plugins or whatever are ready. I understand there's lots to talk about, but the bottom line is, we can't use it yet. So let's take El Viejo at his word. Sounds exciting. Tomorrow we could be on a roll." 

Everyone had a bunch to say on this, but yes, it was way off-topic.

## What about Backdrop?

Hmmm, [Backdrop](http://backdropcms.org/)

El Viejo spoke up (feeling very guilty because he hadn't had the time he thought he would have to support Backdrop development).

"Backdrop is a fascinating alternative of course. And I'll tell you why.

### What's wrong with Drupal

First read Jen Lampton's courageous [INTRODUCING BACKDROP CMS, A DRUPAL FORK](http://www.jenlampton.com/blog/introducing-backdrop-cms-drupal-fork). It explains:

* "Drupal had suddenly become too hard to learn" (learnability problem)
* "Drupal was not intuitive enough" (usability problem)
* Only 25% code overlap in September 2013
* "A lot of professional Drupal developers already have exit strategies. They may even have a day job building or maintaining Drupal 6 and/or Drupal 7 sites, but they go home at night and study Ruby, Node.js, Angular.js, even some are looking into WordPress. They want to be "out" before they have to learn Drupal 8."
* "If they are going to invest in learning something new, why not Ruby, or Node.js, or something else?"

### Why Backdrop may be better

From [Backdrop Roadmap](http://backdropcms.org/about/roadmap):

* Configuration Management System
* Built-in Content Listing Generator
* Revamped Layout System
* Built-in Rich-Text Editor
* Improved Editorial Experience
* Improved Performance
* Improved Mobile Support
* Reduced Theme System Complexity

### But it isn't here yet either

El Viejo was firm. "We need to get our work together now, and that means crafting and maintaining our very own DurableDrupalDistro.
Again, if and when Backdrop is becomes a viable alternative, we can migrate our base web app factory to it, to Drupal 8, or anything else we like."
